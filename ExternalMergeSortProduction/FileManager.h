#pragma once
#include <fstream>
#include "Structures.h"
using namespace std;

/*!
\brief Класс файлового менеджера.
\author Alexander Filippov
\date Ноябрь 2016 года

Класс, отвечающий за взаимодействие приложения с файловой системой. Осуществляет запись последовательностей в файл, чтение последовательности
из файла, а также генерацию последовательностей.
*/
class FileManager
{
private:
	/*!
	\brief Входной файл.

	Поток, используемый для чтения однобайтовой последовательности символьных данных из файла.
	*/
	ifstream *iFile;
	/*!
	\brief Выходной файл.

	Поток, используемый для записи однобайтовой последовательности символьных данных из файла.
	*/
	ofstream *oFile;
	/*!
	\brief Путь к выходному файлу.

	Строка, содержащая путь к выходному файлу.
	*/
	string *oFileStr;
	/*!
	\brief Путь к входному файлу.

	Строка, содержащая путь к входному файлу.
	*/
	string *iFileStr;
	/*!
	\brief Режим работы с файлами.

	Атрибут, азадющий один из режимов работы с файловой системой: NotEnable - режим не задан, WriteOnly - только запись, ReadOnly - Только чтение
	ReadAndWrite - чтение и запись.
	*/
	FileState state;
	/*!
	\brief Флаг достижения конца файла.

	true - если в операциях чтения и записи был достигнут конец файла, false - если нет.
	*/
	bool endOfFile;
public:
	/*!
	\brief Закрытие входного файла.
	
	Закрывает входной файл, если он существует.
	*/
	void closeIFile();
	/*!
	\brief Закрытие выходного файла.
	
	Закрывает входной файл, сохраняя записанную последовательность, если он существует.
	*/
	void closeOFile();
	/*!
	\brief Получение флага конца файла.
	\return Флаг достижения конца файла endOfFile.

	Возвращает true - если конец файла был достигнут при попытке чтения или записи или false - если конец файла не был достигнут.
	*/
	bool getEndOfFile();
	/*!
	\brief Установка флага конца файла в необходимое положение.
	\param[in] b Значение, которое необходимо установить
	
	Устанавливает флаг в нужное положение, например сброс флага, если он уже был обработан.
	*/
	void setEndOfFile(bool b);
	/*!
	\brief Очистка выходного файла.
	
	Затирает выходной файл, вне зависимости от его содержания.
	*/
	void clearOutFile();
	/*!
	\brief Чтение входной последовательности из файла.
	\param[out] arr Массив в который необходимо считать числовую последовательность.
	\param[in] size Размер последовательности которую необходимо считать.
	\param[out] readNumber Число успешно считанных значений из файла.
	\return Код успеха или ошибки.

	Считывает последовательность длиной size в массиив arr, если это возможно. Записывает в readNumber число успешно считанных значений. Возвращает
	код успеха или ошибки.
	*/
	Response read(long long * arr,long long size, long long* readNumber);
	/*!
	\brief Запись числа в файл.
	\param[in] num Число, которое необходимо записать в файл.
	\return Код успеха или ошибки.

	Записывает число в выходной файл. Возвращает код успеха или ошибки.
	*/
	Response write(long long num);
	/*!
	\brief Запись последовательности в файл.
	\param[in] arr Массив, которое необходимо записать в файл.
	\param[in] size Длина записываемого в файл массива.
	\return Код успеха или ошибки.
	
	Записывает последовательность в выходной файл. Возвращает код успеха или ошибки.
	*/
	Response write(long long *arr, long long size);
	/*!
	\brief Определение атрибутов менеджера.
	\param[in] file Строка, содержащая путь к файлу.
	\param[in] st Режим менеджера, который необходимо задать.
	\return Код успеха или ошибки.

	Задает атрибуты менеджера, если это возможно. Возвращает код успеха или ошибки.
	*/
	Response setFiles(string file, FileState st);
	/*!
	\brief Определение атрибутов менеджера.
	\param[in] inFile Строка, содержащая путь к входному файлу.
	\param[in] outFile Строка, содержащая путь к выходному файлу.
	\return Код успеха или ошибки.

	Задает атрибуты менеджера, если это возможно. Устанавливает режим ReadAndWrite или возвращает код ошибки. Возвращает код успеха или ошибки.
	*/
	Response setFiles(string inFile, string outFile);
	/*!
	\brief Проверка состояния менеджера.
	\return Текущее состояние менеджера.

	Возвращает текущее состояние менеджера.
	*/
	FileState getState();
	/*!
	\brief Проверка входного и выходного файла на эквивалентность.
	\return true, если файлы эквивалентны; false, если нет.

	Проверяет на эквивалентность входной и выходной файл.
	*/
	bool checkForEquality();
	/*!
	\brief Определение атрибутов менеджера.
	\param[in] size Размер генерируемой последовательности.
	\param[in] type Тип генерируемой последовательности.
	\return Код успеха или ошибки.

	Генерирует последовательность длиной size одного из типов type: Best - уже упорядоченная последовательность, Average - случайная последовательность,
	Worst - последовательность, упорядоченная по убыванию.
	*/
	Response generateSequence(long long size, SeqType type);
	/*!
	\brief Конструктор класса.
	\param[in] file Строка, содержащая путь к файлу.
	\param[in] st Режим менеджера, который необходимо задать.
	
	Вызывет setParams(...), если код возврата не Success, бросает исключение.
	*/
	FileManager(string iFile, FileState state);
	/*!
	\brief Конструктор класса.
	\param[in] inFile Строка, содержащая путь к файлу.
	\param[in] outFile Строка, содержащая путь к выходному файлу.
	
	Вызывет setParams(...), если код возврата не Success, бросает исключение.
	*/
	FileManager(string inFile,string outFile);
	/*!
	\brief Пустой конструктор класса.
	
	Обнуляет атрибуты.
	*/
	FileManager();
	/*!
	\brief Пустой деструктор класса.
	
	Освобождает выделенную память.
	*/
	~FileManager();
};

